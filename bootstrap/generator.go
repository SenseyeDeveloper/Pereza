package bootstrap

import (
	"errors"
	"fmt"
	"github.com/senseyedeveloper/pereza/parser"
	"io/ioutil"
	"os"
	"path/filepath"
	"sort"
	"strings"
)

type Generator struct {
	parser   *parser.Parser
	settings Settings
}

func NewGenerator(parser *parser.Parser, settings Settings) *Generator {
	return &Generator{parser: parser, settings: settings}
}

func (g *Generator) Run() error {
	for _, filename := range g.settings.Filenames {
		err := g.generate(filename)

		if err != nil {
			return err
		}
	}

	return nil
}

func (g *Generator) generate(filename string) error {
	fileInfo, err := os.Stat(filename)
	if err != nil {
		return err
	}

	result, err := g.parser.Parse(filename, fileInfo.IsDir())
	if err != nil {
		return err
	}

	const suffix = "_perezajson.go"

	var outName string
	if fileInfo.IsDir() {
		outName = filepath.Join(filename, result.PackageName+suffix)
	} else {
		s := strings.TrimSuffix(filename, ".go")

		// FIXME: up before parse
		if s == filename {
			return errors.New("filename must end in '.go'")
		}

		outName = s + suffix
	}

	fmt.Printf("source filename %s\n"+
		"parser result %+v\n"+
		"output filename %s\n", filename, result, outName)

	return g.output(outName, result)
}

func (g *Generator) output(outName string, result parser.Result) error {
	const n = byte('\n')

	types := result.StructNames
	sort.Strings(types)

	header := `// TEMPORARY AUTOGENERATED FILE: perezajson stub code to make the package
// compilable during generation.

package `

	body := `func () MarshalJSON() ([]byte, error) { return nil, nil }
func (*) UnmarshalJSON([]byte) error  { return nil }
`

	typeSize := stringSliceSize(types)

	headerSize := len(header)

	const headerNextSpaceSize = 2
	fullSize := headerSize +
		len(result.PackageName) +
		headerNextSpaceSize +
		len(body)*len(types) +
		typeSize*2

	content := make([]byte, 0, fullSize)

	content = append(content, header...)
	content = append(content, result.PackageName...)

	content = append(content, n, n)

	for _, t := range types {
		content = append(content, "func ("...)
		content = append(content, t...)
		content = append(content, ") MarshalJSON() ([]byte, error) { return nil, nil }\n"...)
		content = append(content, "func (*"...)
		content = append(content, t...)
		content = append(content, ") UnmarshalJSON([]byte) error  { return nil }\n"...)
	}

	if fullSize != len(content) {
		fmt.Printf("expect %d got %d", fullSize, len(content))
	}

	return ioutil.WriteFile(outName, content, 0666)
}

func stringSliceSize(slice []string) int {
	result := 0

	for _, s := range slice {
		result += len(s)
	}

	return result
}
