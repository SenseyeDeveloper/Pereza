package bootstrap

import (
	"errors"
	"fmt"
	"github.com/senseyedeveloper/pereza/core"
	"github.com/senseyedeveloper/pereza/parser"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

type Generator struct {
	parser   *parser.Parser
	settings Settings
}

func NewGenerator(parser *parser.Parser, settings Settings) *Generator {
	return &Generator{parser: parser, settings: settings}
}

func (g *Generator) Run() error {
	for _, filename := range g.settings.Filenames {
		err := g.generate(filename)

		if err != nil {
			return err
		}
	}

	return nil
}

func (g *Generator) generate(filename string) error {
	fileInfo, err := os.Stat(filename)
	if err != nil {
		return err
	}

	result, err := g.parser.Parse(filename, fileInfo.IsDir())
	if err != nil {
		return err
	}

	const suffix = "_perezajson.go"

	var outName string
	if fileInfo.IsDir() {
		outName = filepath.Join(filename, result.PackageName+suffix)
	} else {
		s := strings.TrimSuffix(filename, ".go")

		// FIXME: up before parse
		if s == filename {
			return errors.New("filename must end in '.go'")
		}

		outName = s + suffix
	}

	fmt.Printf("source filename %s\n"+
		"parser result %+v\n"+
		"output filename %s\n", filename, result, outName)

	err = ioutil.WriteFile(outName, core.Stub(result.PackageName, result.StructNames), 0666)
	if err != nil {
		return err
	}

	path, err := g.writeMain(outName, result.PackagePath, result.PackageName, result.StructNames)
	if err != nil {
		return err
	}
	defer os.Remove(path)

	return nil
}

func (g *Generator) writeMain(outName, packagePath, packageName string, types []string) (path string, err error) {
	const genPackage = "github.com/mailru/easyjson/gen"

	f, err := ioutil.TempFile(filepath.Dir(outName), "easyjson-bootstrap")
	if err != nil {
		return "", err
	}

	fmt.Fprintln(f, "// +build ignore")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "// TEMPORARY AUTOGENERATED FILE: easyjson bootstapping code to launch")
	fmt.Fprintln(f, "// the actual generator.")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "package main")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "import (")
	fmt.Fprintln(f, `  "fmt"`)
	fmt.Fprintln(f, `  "os"`)
	fmt.Fprintln(f)
	fmt.Fprintf(f, "  %q\n", genPackage)
	if len(types) > 0 {
		fmt.Fprintln(f)
		fmt.Fprintf(f, "  pkg %q\n", packagePath)
	}
	fmt.Fprintln(f, ")")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "func main() {")
	fmt.Fprintf(f, "  g := gen.NewGenerator(%q)\n", filepath.Base(outName))
	fmt.Fprintf(f, "  g.SetPkg(%q, %q)\n", packageName, packagePath)

	for _, v := range types {
		fmt.Fprintln(f, "  g.Add(pkg.PerezaJSON_exporter_"+v+"(nil))")
	}

	fmt.Fprintln(f, "  if err := g.Run(os.Stdout); err != nil {")
	fmt.Fprintln(f, "    fmt.Fprintln(os.Stderr, err)")
	fmt.Fprintln(f, "    os.Exit(1)")
	fmt.Fprintln(f, "  }")
	fmt.Fprintln(f, "}")

	src := f.Name()
	if err := f.Close(); err != nil {
		return src, err
	}

	dest := src + ".go"
	return dest, os.Rename(src, dest)
}
