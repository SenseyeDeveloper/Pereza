package core

import (
	"path/filepath"
)

const (
	stubHeader = `// TEMPORARY AUTOGENERATED FILE: perezajson stub code to make the package
// compilable during generation.

package `
	n = byte('\n')
)

func Stub(packageName string, types []string) []byte {
	content := make([]byte, 0, getStubSize(packageName, types))

	content = append(content, stubHeader...)
	content = append(content, packageName...)

	content = append(content, n, n)

	for _, t := range types {
		content = append(content, "func ("...)
		content = append(content, t...)
		content = append(content, ") MarshalJSON() ([]byte, error) { return nil, nil }\n"...)
		content = append(content, "func (*"...)
		content = append(content, t...)
		content = append(content, ") UnmarshalJSON([]byte) error  { return nil }\n"...)
		content = append(content, n)
		content = append(content, "type PerezaJSON_exporter_"...)
		content = append(content, t...)
		content = append(content, ' ', '*')
		content = append(content, t...)
		content = append(content, n)
	}

	return content
}

func GeneratorRunner(outName, packagePath, packageName string, types []string) []byte {
	const header = `// +build ignore

// TEMPORARY AUTOGENERATED FILE: easyjson bootstapping code to launch
// the actual generator.

package main

import (
	"fmt"
	"github.com/mailru/easyjson/gen"
	"os"
`

	const footer = `
	if err := g.Run(os.Stdout); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
`

	filename := filepath.Base(outName)

	content := make([]byte, 0, len(header))

	content = append(content, header...)

	if len(types) > 0 {
		content = append(content, n)
		content = append(content, `	pkg "`...)
		content = append(content, packagePath...)
		content = append(content, '"', n)
	}

	content = append(content, ')', n, n)
	content = append(content, "func main() {"...)
	content = append(content, n)
	content = append(content, `	g := gen.NewGenerator("`...)
	content = append(content, filename...)
	content = append(content, '"', ')', n)
	content = append(content, `	g.SetPkg("`...)
	content = append(content, packageName...)
	content = append(content, '"', ',', ' ', '"')
	content = append(content, packagePath...)
	content = append(content, '"', ')')

	for _, t := range types {
		content = append(content, "\n	g.Add(pkg.PerezaJSON_exporter_"...)
		content = append(content, t...)
		content = append(content, "(nil))"...)
	}

	content = append(content, footer...)

	return content
}

func getStubSize(packageName string, types []string) int {
	//	body := `func () MarshalJSON() ([]byte, error) { return nil, nil }
	//func (*) UnmarshalJSON([]byte) error  { return nil }
	//`

	const (
		headerSize          = len(stubHeader)
		headerNextSpaceSize = 2
		bodySize            = 140 // len(body)
	)

	return headerSize +
		len(packageName) +
		headerNextSpaceSize +
		bodySize*len(types) +
		stringSliceSize(types)*4 // 4 is func: MarshalJSON & UnmarshalJSON & type alias
}
