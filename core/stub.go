package core

const (
	stubHeader = `// TEMPORARY AUTOGENERATED FILE: perezajson stub code to make the package
// compilable during generation.

package `
	n = byte('\n')
)

func Stub(packageName string, types []string) []byte {
	content := make([]byte, 0, getStubSize(packageName, types))

	content = append(content, stubHeader...)
	content = append(content, packageName...)

	content = append(content, n, n)

	for _, t := range types {
		content = append(content, "func ("...)
		content = append(content, t...)
		content = append(content, ") MarshalJSON() ([]byte, error) { return nil, nil }\n"...)
		content = append(content, "func (*"...)
		content = append(content, t...)
		content = append(content, ") UnmarshalJSON([]byte) error  { return nil }\n"...)
	}

	return content
}

func getStubSize(packageName string, types []string) int {
	//	body := `func () MarshalJSON() ([]byte, error) { return nil, nil }
	//func (*) UnmarshalJSON([]byte) error  { return nil }
	//`

	const headerSize = 116 // len(stubHeader)
	const headerNextSpaceSize = 2
	const bodySize = 111 // len(body)

	return headerSize +
		len(packageName) +
		headerNextSpaceSize +
		bodySize*len(types) +
		stringSliceSize(types)*2 // 2 is func: MarshalJSON & UnmarshalJSON
}
